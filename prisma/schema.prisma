generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   Int     @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
model User {
  id            Int      @id @default(autoincrement())
  name          String
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String
  role          Role      @default(USER)
  image         String?
  createdAt     DateTime? @default(now())
  tasks         Task[]
  sessions      Session[]
  tokens        Token[]
  accounts      Account[]
}

model Task {
  id          Int            @id @default(autoincrement())
  title       String
  description String
  status      String         @default("pending")
  userId      Int
  user        User           @relation(fields: [userId], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?      // Soft delete field
  activities  TaskActivity[] // Relation to TaskActivity
}

model Token {
  id          Int      @id @default(autoincrement())
  token       String   @unique 
  refreshToken String?  @unique
  userId      Int  
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  expiresAt   DateTime
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  // refreshToken String?  @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
model TaskActivity {
  id          Int      @id @default(autoincrement())
  taskId      Int
  action      String
  oldStatus    String?  
  newStatus    String?   
  details     String?  // Additional details (e.g., field changes)
  performedBy Int      // User ID who performed the action
  performedAt DateTime @default(now())

  // Relationship to Task
  task        Task     @relation(fields: [taskId], references: [id])
}

enum Role {
  USER
  ADMIN
}